/* TODO
 * - make the js script A LOT cleaner. this is the one which gonna be cut/paste by the users
 *   - another issue if the js size... compress it
 * - If state == toupdate or toinstall, then a click on the badge must go to the download page
 * - the "web badge" wikipedia page contains standard size... use them.
 */


/*
-- ok this is an example of how it should look once properly done 
- DONE how to minified this script ?
- DONE write the neoip-webpack badge_start function
- TODO make the img a <div> to be more flexible. change it to img inside _start()
- put all this on the server
  - script AND image
- put the description of it in a web4web.tv page
<center><img id="blabla"/></center>
<sBBbcript src="http://web4web.tv/jspackmin/neoip_webpack_badge_packmin.js"></script> 
<sBBcript>neoip_webpack_badge_start("180x33", "blabla");</script>
*/


function neoip_webpack_badge_set(htmlid, size_str, state)
{
	var link_url	= "http://www.web4web.tv";
	var html_txt	= "";
	html_txt	= "<a style='text-decoration:none' href='" + link_url + "'>";
	html_txt	+= "<img ";
	html_txt	+= "style='border-width: 0;' ";
	html_txt	+= "src=";
	html_txt	+= "'http://www.web4web.tv/player/widget/webpack_badge/cache/neoip_webpack_badge_" + state + "_" + size_str + ".png'";
	html_txt	+= "/>";
	html_txt	+= "</a>";
	// change the <img> src according to the new state 
	var elem	= document.getElementById(htmlid);
	elem.innerHTML	= html_txt;
}
function neoip_webpack_badge_start(htmlid, size_str)
{
	// log to debug
	console.info("entereeeee");
	
	/** \brief neoip.webpack_detect_cb_t functions
	 */
	function webpack_detect_cb(webpack_detect, userptr, new_state)
	{
		// log to debug
		console.info(new_state);
		console.dir(userptr);
		console.info("blabla")
		// destroy this object
		webpack_detect.destructor();
		// set the initial state
		var htmlid	= userptr["htmlid"];
		var size_str	= userptr["size_str"];
		neoip_webpack_badge_set(htmlid, size_str, new_state);
	}

	// launch neoip.webpack_detect_t
	var userptr	= {	"htmlid"	: htmlid,
				"size_str"	: size_str
			};
	var callback	= neoip.webpack_detect_cb_t(webpack_detect_cb, this, userptr);
	webpack_detect	= new neoip.webpack_detect_t(callback);	
	
	// set the initial state
	neoip_webpack_badge_set(htmlid, size_str, "inprobing");
}

